// src/components/ChatWindow.tsx
import React, { useState } from 'react'
import { MessageList, type Msg } from './MessageList'
import { MessageInput } from './MessageInput'
import { chat } from '../lib/chat'
import { tts } from '../lib/tts'
import { extractFacts, type Profile } from '../lib/facts'
import { store, calcBenchmarks } from '../lib/profile'

/** –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ store.memory (–µ—Å–ª–∏ –Ω–µ—Ç store.remember) */
function rememberSafe(text: string) {
    // @ts-ignore ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ remember, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (typeof (store as any).remember === 'function') {
        // @ts-ignore
        (store as any).remember(text)
        return
    }
    const cur = store.get()
    const mem = Array.isArray(cur.memory) ? cur.memory.slice() : []
    mem.push({ ts: Date.now(), text })
    store.patch({ memory: mem })
}

/** –ü–∞—Ç—á —Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–µ—Ä–µ—Å—á—ë—Ç –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ */
function patchFacts(patch: Partial<Profile>) {
    if (!patch || Object.keys(patch).length === 0) return
    const cur = store.get()
    const nextProfile: Profile = { ...cur.profile, ...patch }
    store.patch({ profile: nextProfile, benchmarks: calcBenchmarks(nextProfile) })
}

export const ChatWindow: React.FC = () => {
    const [items, setItems] = useState<Msg[]>([])
    const [voiceOn, setVoiceOn] = useState<boolean>(true)
    const [ttsHint, setTtsHint] = useState<string>('')

    /** –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–æ–¥–µ–ª—å + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏/–ø—Ä–æ—Ñ–∏–ª—è + TTS */
    const send = async (text: string) => {
        const userMsg: Msg = { id: crypto.randomUUID(), role: 'user', content: text }
        setItems(prev => [...prev, userMsg])

        // –ü–∞–º—è—Ç—å/—Ñ–∞–∫—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        rememberSafe(`üßë ${text}`)
        patchFacts(extractFacts(text))

        let acc = ''
        const stream = await chat([...items, userMsg])

        for await (const chunk of stream) {
            acc += chunk
            setItems(prev => {
                const last = prev[prev.length - 1]
                if (last?.role === 'assistant') {
                    last.content += chunk
                    return [...prev.slice(0, -1), last]
                }
                return [...prev, { id: crypto.randomUUID(), role: 'assistant', content: chunk }]
            })
        }

        // –ü–∞–º—è—Ç—å/—Ñ–∞–∫—Ç—ã —Å –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (acc.trim()) {
            rememberSafe(`ü§ñ ${acc}`)
            patchFacts(extractFacts(acc))
        }

        // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
        if (voiceOn && acc.trim()) {
            const r = await tts.speak(acc, { voice: 'alloy', format: 'mp3' })
            if (!r.ok) setTtsHint(`TTS: ${r.error ?? '–æ—à–∏–±–∫–∞'}`)
            else setTtsHint(r.used === 'server' ? '–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: —Å–µ—Ä–≤–µ—Ä' : '–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: –±—Ä–∞—É–∑–µ—Ä (Web Speech)')
        }
    }

    /** –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ */
    const replay = async () => {
        const lastAssistant = [...items].reverse().find(m => m.role === 'assistant')
        if (!lastAssistant?.content?.trim()) return
        await tts.speak(lastAssistant.content, { voice: 'alloy', format: 'mp3' })
    }

    /** –ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å TTS */
    const togglePause = async () => {
        const { mode } = tts.state()
        if (mode === 'playing') await tts.pause()
        else if (mode === 'paused') await tts.resume()
    }

    /** –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ */
    const stop = async () => { await tts.stop() }

    const { mode } = tts.state()
    const pauseTitle = mode === 'paused' ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ü–∞—É–∑–∞'
    const pauseIcon = mode === 'paused' ? '‚èØÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '‚è∏Ô∏è –ü–∞—É–∑–∞'

    return (
        <div style={{ display: 'grid', gridTemplateRows: 'auto 1fr auto', height: '100%' }}>
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π —á–∞—Ç–∞ */}
            <div
                style={{
                    padding: 16,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    borderBottom: '1px solid #eee',
                    gap: 12
                }}
            >
                <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                    <div style={{ fontWeight: 700, color: 'var(--green)' }}>–ß–∞—Ç</div>
                    <span className="badge">active</span>
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                    <button
                        type="button"
                        className="btn"
                        onClick={() => setVoiceOn(v => !v)}
                        title="–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"
                    >
                        {voiceOn ? 'üîä –ì–æ–ª–æ—Å: –í–∫–ª' : 'üîá –ì–æ–ª–æ—Å: –í—ã–∫–ª'}
                    </button>

                    <button type="button" className="btn" onClick={replay} title="–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç">
                        ‚ñ∂Ô∏è –ü–æ–≤—Ç–æ—Ä
                    </button>

                    <button type="button" className="btn" onClick={togglePause} title={pauseTitle}>
                        {pauseIcon}
                    </button>

                    <button type="button" className="btn" onClick={stop} title="–°—Ç–æ–ø">
                        ‚èπÔ∏è –°—Ç–æ–ø
                    </button>
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <MessageList items={items} />

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ TTS */}
            {ttsHint && (
                <div style={{ padding: '6px 12px', fontSize: 12, opacity: 0.75 }}>{ttsHint}</div>
            )}

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <MessageInput onSend={send} />
        </div>
    )
}
